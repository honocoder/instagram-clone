{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\n\nvar MentionsTextInput = function (_Component) {\n  _inherits(MentionsTextInput, _Component);\n\n  var _super = _createSuper(MentionsTextInput);\n\n  function MentionsTextInput() {\n    var _this;\n\n    _classCallCheck(this, MentionsTextInput);\n\n    _this = _super.call(this);\n    _this.state = {\n      textInputHeight: \"\",\n      isTrackingStarted: false,\n      suggestionRowHeight: new Animated.Value(0)\n    };\n    _this.isTrackingStarted = false;\n    _this.previousChar = \" \";\n    return _this;\n  }\n\n  _createClass(MentionsTextInput, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        textInputHeight: this.props.textInputMinHeight\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!nextProps.value) {\n        this.resetTextbox();\n      } else if (this.isTrackingStarted && !nextProps.horizontal && nextProps.suggestionsData.length !== 0) {\n        var numOfRows = nextProps.MaxVisibleRowCount >= nextProps.suggestionsData.length ? nextProps.suggestionsData.length : nextProps.MaxVisibleRowCount;\n        var height = numOfRows * nextProps.suggestionRowHeight;\n        this.openSuggestionsPanel(height);\n      }\n    }\n  }, {\n    key: \"startTracking\",\n    value: function startTracking() {\n      this.isTrackingStarted = true;\n      this.openSuggestionsPanel();\n      this.setState({\n        isTrackingStarted: true\n      });\n    }\n  }, {\n    key: \"stopTracking\",\n    value: function stopTracking() {\n      this.isTrackingStarted = false;\n      this.closeSuggestionsPanel();\n      this.setState({\n        isTrackingStarted: false\n      });\n    }\n  }, {\n    key: \"openSuggestionsPanel\",\n    value: function openSuggestionsPanel(height) {\n      Animated.timing(this.state.suggestionRowHeight, {\n        toValue: height ? height : this.props.suggestionRowHeight,\n        duration: 100\n      }).start();\n    }\n  }, {\n    key: \"closeSuggestionsPanel\",\n    value: function closeSuggestionsPanel() {\n      Animated.timing(this.state.suggestionRowHeight, {\n        toValue: 0,\n        duration: 100\n      }).start();\n    }\n  }, {\n    key: \"updateSuggestions\",\n    value: function updateSuggestions(lastKeyword) {\n      this.props.triggerCallback(lastKeyword);\n    }\n  }, {\n    key: \"identifyKeyword\",\n    value: function identifyKeyword(val) {\n      if (this.isTrackingStarted) {\n        var boundary = this.props.triggerLocation === 'new-word-only' ? 'B' : '';\n        var pattern = new RegExp(\"\\\\\" + boundary + this.props.trigger + \"[a-z0-9_-]+|\\\\\" + boundary + this.props.trigger, \"gi\");\n        var keywordArray = val.match(pattern);\n\n        if (keywordArray && !!keywordArray.length) {\n          var lastKeyword = keywordArray[keywordArray.length - 1];\n          this.updateSuggestions(lastKeyword);\n        }\n      }\n    }\n  }, {\n    key: \"onChangeText\",\n    value: function onChangeText(val) {\n      this.props.onChangeText(val);\n      var lastChar = val.substr(val.length - 1);\n      var wordBoundry = this.props.triggerLocation === 'new-word-only' ? this.previousChar.trim().length === 0 : true;\n\n      if (lastChar === this.props.trigger && wordBoundry) {\n        this.startTracking();\n      } else if (lastChar === ' ' && this.state.isTrackingStarted || val === \"\") {\n        this.stopTracking();\n      }\n\n      this.previousChar = lastChar;\n      this.identifyKeyword(val);\n    }\n  }, {\n    key: \"resetTextbox\",\n    value: function resetTextbox() {\n      this.previousChar = \" \";\n      this.stopTracking();\n      this.setState({\n        textInputHeight: this.props.textInputMinHeight\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, null, React.createElement(Animated.View, {\n        style: [_objectSpread({}, this.props.suggestionsPanelStyle), {\n          height: this.state.suggestionRowHeight\n        }]\n      }, React.createElement(FlatList, {\n        keyboardShouldPersistTaps: \"always\",\n        horizontal: this.props.horizontal,\n        ListEmptyComponent: this.props.loadingComponent,\n        enableEmptySections: true,\n        data: this.props.suggestionsData,\n        keyExtractor: this.props.keyExtractor,\n        renderItem: function renderItem(rowData) {\n          return _this2.props.renderSuggestionsRow(rowData, _this2.stopTracking.bind(_this2));\n        }\n      })), React.createElement(TextInput, _extends({}, this.props, {\n        onContentSizeChange: function onContentSizeChange(event) {\n          _this2.setState({\n            textInputHeight: _this2.props.textInputMinHeight >= event.nativeEvent.contentSize.height ? _this2.props.textInputMinHeight : event.nativeEvent.contentSize.height + 10\n          });\n        },\n        ref: function ref(component) {\n          return _this2._textInput = component;\n        },\n        onChangeText: this.onChangeText.bind(this),\n        multiline: true,\n        value: this.props.value,\n        style: [_objectSpread({}, this.props.textInputStyle), {\n          height: Math.min(this.props.textInputMaxHeight, this.state.textInputHeight)\n        }],\n        placeholder: this.props.placeholder ? this.props.placeholder : 'Write a comment...'\n      })));\n    }\n  }]);\n\n  return MentionsTextInput;\n}(Component);\n\nexport { MentionsTextInput as default };\nMentionsTextInput.propTypes = {\n  textInputStyle: TextInput.propTypes.style,\n  suggestionsPanelStyle: ViewPropTypes.style,\n  loadingComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  textInputMinHeight: PropTypes.number,\n  textInputMaxHeight: PropTypes.number,\n  trigger: PropTypes.string.isRequired,\n  triggerLocation: PropTypes.oneOf(['new-word-only', 'anywhere']).isRequired,\n  value: PropTypes.string.isRequired,\n  onChangeText: PropTypes.func.isRequired,\n  triggerCallback: PropTypes.func.isRequired,\n  renderSuggestionsRow: PropTypes.oneOfType([PropTypes.func, PropTypes.element]).isRequired,\n  suggestionsData: PropTypes.array.isRequired,\n  keyExtractor: PropTypes.func.isRequired,\n  horizontal: PropTypes.bool,\n  suggestionRowHeight: PropTypes.number.isRequired,\n  MaxVisibleRowCount: function MaxVisibleRowCount(props, propName, componentName) {\n    if (!props.horizontal && !props.MaxVisibleRowCount) {\n      return new Error(\"Prop 'MaxVisibleRowCount' is required if horizontal is set to false.\");\n    }\n  }\n};\nMentionsTextInput.defaultProps = {\n  textInputStyle: {\n    borderColor: '#ebebeb',\n    borderWidth: 1,\n    fontSize: 15\n  },\n  suggestionsPanelStyle: {\n    backgroundColor: 'rgba(100,100,100,0.1)'\n  },\n  loadingComponent: function loadingComponent() {\n    return React.createElement(Text, null, \"Loading...\");\n  },\n  textInputMinHeight: 30,\n  textInputMaxHeight: 80,\n  horizontal: true\n};","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/node_modules/react-native-mentions/src/MentionsTextInput.js"],"names":["React","Component","ViewPropTypes","PropTypes","MentionsTextInput","state","textInputHeight","isTrackingStarted","suggestionRowHeight","Animated","Value","previousChar","setState","props","textInputMinHeight","nextProps","value","resetTextbox","horizontal","suggestionsData","length","numOfRows","MaxVisibleRowCount","height","openSuggestionsPanel","closeSuggestionsPanel","timing","toValue","duration","start","lastKeyword","triggerCallback","val","boundary","triggerLocation","pattern","RegExp","trigger","keywordArray","match","updateSuggestions","onChangeText","lastChar","substr","wordBoundry","trim","startTracking","stopTracking","identifyKeyword","suggestionsPanelStyle","loadingComponent","keyExtractor","rowData","renderSuggestionsRow","bind","event","nativeEvent","contentSize","component","_textInput","textInputStyle","Math","min","textInputMaxHeight","placeholder","propTypes","TextInput","style","oneOfType","func","element","number","string","isRequired","oneOf","array","bool","propName","componentName","Error","defaultProps","borderColor","borderWidth","fontSize","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  Animated,\n  TextInput,\n  FlatList,\n  ViewPropTypes\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport default class MentionsTextInput extends Component {\n  constructor() {\n    super();\n    this.state = {\n      textInputHeight: \"\",\n      isTrackingStarted: false,\n      suggestionRowHeight: new Animated.Value(0),\n\n    }\n    this.isTrackingStarted = false;\n    this.previousChar = \" \";\n  }\n\n  componentWillMount() {\n    this.setState({\n      textInputHeight: this.props.textInputMinHeight\n    })\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.value) {\n      this.resetTextbox();\n    } else if (this.isTrackingStarted && !nextProps.horizontal && nextProps.suggestionsData.length !== 0) {\n      const numOfRows = nextProps.MaxVisibleRowCount >= nextProps.suggestionsData.length ? nextProps.suggestionsData.length : nextProps.MaxVisibleRowCount;\n      const height = numOfRows * nextProps.suggestionRowHeight;\n      this.openSuggestionsPanel(height);\n    }\n  }\n\n  startTracking() {\n    this.isTrackingStarted = true;\n    this.openSuggestionsPanel();\n    this.setState({\n      isTrackingStarted: true\n    })\n  }\n\n  stopTracking() {\n    this.isTrackingStarted = false;\n    this.closeSuggestionsPanel();\n    this.setState({\n      isTrackingStarted: false\n    })\n  }\n\n  openSuggestionsPanel(height) {\n    Animated.timing(this.state.suggestionRowHeight, {\n      toValue: height ? height : this.props.suggestionRowHeight,\n      duration: 100,\n    }).start();\n  }\n\n  closeSuggestionsPanel() {\n    Animated.timing(this.state.suggestionRowHeight, {\n      toValue: 0,\n      duration: 100,\n    }).start();\n  }\n\n  updateSuggestions(lastKeyword) {\n    this.props.triggerCallback(lastKeyword);\n  }\n\n  identifyKeyword(val) {\n    if (this.isTrackingStarted) {\n      const boundary = this.props.triggerLocation === 'new-word-only' ? 'B' : '';\n      const pattern = new RegExp(`\\\\${boundary}${this.props.trigger}[a-z0-9_-]+|\\\\${boundary}${this.props.trigger}`, `gi`);\n      const keywordArray = val.match(pattern);\n      if (keywordArray && !!keywordArray.length) {\n        const lastKeyword = keywordArray[keywordArray.length - 1];\n        this.updateSuggestions(lastKeyword);\n      }\n    }\n  }\n\n  onChangeText(val) {\n    this.props.onChangeText(val); // pass changed text back\n    const lastChar = val.substr(val.length - 1);\n    const wordBoundry = (this.props.triggerLocation === 'new-word-only') ? this.previousChar.trim().length === 0 : true;\n    if (lastChar === this.props.trigger && wordBoundry) {\n      this.startTracking();\n    } else if (lastChar === ' ' && this.state.isTrackingStarted || val === \"\") {\n      this.stopTracking();\n    }\n    this.previousChar = lastChar;\n    this.identifyKeyword(val);\n  }\n\n  resetTextbox() {\n    this.previousChar = \" \";\n    this.stopTracking();\n    this.setState({ textInputHeight: this.props.textInputMinHeight });\n  }\n\n  render() {\n    return (\n      <View>\n        <Animated.View style={[{ ...this.props.suggestionsPanelStyle }, { height: this.state.suggestionRowHeight }]}>\n          <FlatList\n            keyboardShouldPersistTaps={\"always\"}\n            horizontal={this.props.horizontal}\n            ListEmptyComponent={this.props.loadingComponent}\n            enableEmptySections={true}\n            data={this.props.suggestionsData}\n            keyExtractor={this.props.keyExtractor}\n            renderItem={(rowData) => { return this.props.renderSuggestionsRow(rowData, this.stopTracking.bind(this)) }}\n          />\n        </Animated.View>\n        <TextInput\n          {...this.props}\n          onContentSizeChange={(event) => {\n            this.setState({\n              textInputHeight: this.props.textInputMinHeight >= event.nativeEvent.contentSize.height ? this.props.textInputMinHeight : event.nativeEvent.contentSize.height + 10,\n            });\n          }}\n          ref={component => this._textInput = component}\n          onChangeText={this.onChangeText.bind(this)}\n          multiline={true}\n          value={this.props.value}\n          style={[{ ...this.props.textInputStyle }, { height: Math.min(this.props.textInputMaxHeight, this.state.textInputHeight) }]}\n          placeholder={this.props.placeholder ? this.props.placeholder : 'Write a comment...'}\n        />\n      </View>\n    )\n  }\n}\n\nMentionsTextInput.propTypes = {\n  textInputStyle: TextInput.propTypes.style,\n  suggestionsPanelStyle: ViewPropTypes.style,\n  loadingComponent: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.element,\n  ]),\n  textInputMinHeight: PropTypes.number,\n  textInputMaxHeight: PropTypes.number,\n  trigger: PropTypes.string.isRequired,\n  triggerLocation: PropTypes.oneOf(['new-word-only', 'anywhere']).isRequired,\n  value: PropTypes.string.isRequired,\n  onChangeText: PropTypes.func.isRequired,\n  triggerCallback: PropTypes.func.isRequired,\n  renderSuggestionsRow: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.element,\n  ]).isRequired,\n  suggestionsData: PropTypes.array.isRequired,\n  keyExtractor: PropTypes.func.isRequired,\n  horizontal: PropTypes.bool,\n  suggestionRowHeight: PropTypes.number.isRequired,\n  MaxVisibleRowCount: function(props, propName, componentName) {\n    if(!props.horizontal && !props.MaxVisibleRowCount) {\n      return new Error(\n        `Prop 'MaxVisibleRowCount' is required if horizontal is set to false.`\n      );\n    }\n  }\n};\n\nMentionsTextInput.defaultProps = {\n  textInputStyle: { borderColor: '#ebebeb', borderWidth: 1, fontSize: 15 },\n  suggestionsPanelStyle: { backgroundColor: 'rgba(100,100,100,0.1)' },\n  loadingComponent: () => <Text>Loading...</Text>,\n  textInputMinHeight: 30,\n  textInputMaxHeight: 80,\n  horizontal: true,\n}\n"]},"metadata":{},"sourceType":"module"}