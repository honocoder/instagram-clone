{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { __awaiter, __rest } from \"tslib\";\nimport { Audio, Video } from 'expo-av';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ControlStates, ErrorSeverity, PlaybackStates } from \"./constants\";\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles } from \"./utils\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { defaultProps } from \"./props\";\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport Slider from '@react-native-community/slider';\n\nvar VideoPlayer = function VideoPlayer(tempProps) {\n  var props = deepMerge(defaultProps, tempProps);\n  var playbackInstance = null;\n  var controlsTimer = null;\n  var initialShow = props.defaultControlsVisible;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\n\n  var _useState3 = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden),\n      _useState4 = _slicedToArray(_useState3, 2),\n      controlsState = _useState4[0],\n      setControlsState = _useState4[1];\n\n  var _useState5 = useState({\n    position: 0,\n    duration: 0,\n    state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      playbackInstanceInfo = _useState6[0],\n      setPlaybackInstanceInfo = _useState6[1];\n\n  var _a = props.slider,\n      sliderRef = _a.ref,\n      sliderProps = __rest(_a, [\"ref\"]);\n\n  var screenRatio = props.style.width / props.style.height;\n  var videoHeight = props.style.height;\n  var videoWidth = videoHeight * screenRatio;\n\n  if (videoWidth > props.style.width) {\n    videoWidth = props.style.width;\n    videoHeight = videoWidth / screenRatio;\n  }\n\n  useEffect(function () {\n    setAudio();\n    return function () {\n      if (playbackInstance) {\n        playbackInstance.setStatusAsync({\n          shouldPlay: false\n        });\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (!props.videoProps.source) {\n      console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' + 'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\n      setErrorMessage('`Source` is a required in `videoProps`');\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        state: PlaybackStates.Error\n      }));\n    } else {\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        state: PlaybackStates.Playing\n      }));\n    }\n  }, [props.videoProps.source]);\n\n  var hideAnimation = function hideAnimation() {\n    Animated.timing(controlsOpacity, {\n      toValue: 0,\n      duration: props.animation.fadeOutDuration,\n      useNativeDriver: true\n    }).start(function (_ref) {\n      var finished = _ref.finished;\n\n      if (finished) {\n        setControlsState(ControlStates.Hidden);\n      }\n    });\n  };\n\n  var animationToggle = function animationToggle() {\n    if (controlsState === ControlStates.Hidden) {\n      Animated.timing(controlsOpacity, {\n        toValue: 1,\n        duration: props.animation.fadeInDuration,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          setControlsState(ControlStates.Visible);\n        }\n      });\n    } else if (controlsState === ControlStates.Visible) {\n      hideAnimation();\n    }\n\n    if (controlsTimer === null) {\n      controlsTimer = setTimeout(function () {\n        if (playbackInstanceInfo.state === PlaybackStates.Playing && controlsState === ControlStates.Hidden) {\n          hideAnimation();\n        }\n\n        if (controlsTimer) {\n          clearTimeout(controlsTimer);\n        }\n\n        controlsTimer = null;\n      }, 2000);\n    }\n  };\n\n  var setAudio = function setAudio() {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Audio.setAudioModeAsync({\n                playsInSilentModeIOS: true\n              });\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              props.errorCallback({\n                type: ErrorSeverity.NonFatal,\n                message: 'Audio.setAudioModeAsync',\n                obj: _context.t0\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n  };\n\n  var updatePlaybackCallback = function updatePlaybackCallback(status) {\n    props.playbackCallback(status);\n\n    if (status.isLoaded) {\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        position: status.positionMillis,\n        duration: status.durationMillis || 0,\n        state: status.didJustFinish ? PlaybackStates.Ended : status.isBuffering ? PlaybackStates.Buffering : status.shouldPlay ? PlaybackStates.Playing : PlaybackStates.Paused\n      }));\n\n      if (status.didJustFinish && controlsState === ControlStates.Hidden || status.isBuffering && controlsState === ControlStates.Hidden && initialShow) {\n        animationToggle();\n        initialShow = false;\n      }\n    } else {\n      if (status.isLoaded === false && status.error) {\n        var errorMsg = \"Encountered a fatal error during playback: \" + status.error;\n        setErrorMessage(errorMsg);\n        props.errorCallback({\n          type: ErrorSeverity.Fatal,\n          message: errorMsg,\n          obj: {}\n        });\n      }\n    }\n  };\n\n  var togglePlay = function togglePlay() {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n      var shouldPlay;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(controlsState === ControlStates.Hidden)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\n\n              if (!(playbackInstance !== null)) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 6;\n              return playbackInstance.setStatusAsync(_extends({\n                shouldPlay: shouldPlay\n              }, playbackInstanceInfo.state === PlaybackStates.Ended && {\n                positionMillis: 0\n              }));\n\n            case 6:\n              setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n                state: playbackInstanceInfo.state === PlaybackStates.Playing ? PlaybackStates.Paused : PlaybackStates.Playing\n              }));\n\n              if (shouldPlay) {\n                animationToggle();\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  };\n\n  if (playbackInstanceInfo.state === PlaybackStates.Error) {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: props.style.videoBackgroundColor,\n        width: videoWidth,\n        height: videoHeight\n      }\n    }, React.createElement(ErrorMessage, {\n      style: props.textStyle,\n      message: errorMessage\n    }));\n  }\n\n  if (playbackInstanceInfo.state === PlaybackStates.Loading) {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: props.style.controlsBackgroundColor,\n        width: videoWidth,\n        height: videoHeight,\n        justifyContent: 'center'\n      }\n    }, props.icon.loading || React.createElement(ActivityIndicator, props.activityIndicator));\n  }\n\n  return React.createElement(View, {\n    style: {\n      backgroundColor: props.style.videoBackgroundColor,\n      width: videoWidth,\n      height: videoHeight,\n      maxWidth: '100%'\n    }\n  }, React.createElement(Video, _extends({\n    style: styles.videoWrapper\n  }, props.videoProps, {\n    ref: function ref(component) {\n      playbackInstance = component;\n\n      if (props.videoProps.ref) {\n        props.videoProps.ref.current = component;\n      }\n    },\n    onPlaybackStatusUpdate: updatePlaybackCallback\n  })), React.createElement(TouchableWithoutFeedback, {\n    onPress: animationToggle\n  }, React.createElement(Animated.View, {\n    style: _extends(_extends({}, StyleSheet.absoluteFillObject), {\n      opacity: controlsOpacity,\n      justifyContent: 'center',\n      alignItems: 'center'\n    })\n  }, React.createElement(View, {\n    style: _extends(_extends({}, StyleSheet.absoluteFillObject), {\n      backgroundColor: props.style.controlsBackgroundColor,\n      opacity: 0.5\n    })\n  }), React.createElement(View, {\n    pointerEvents: controlsState === ControlStates.Visible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    style: styles.iconWrapper\n  }, React.createElement(TouchableButton, {\n    onPress: togglePlay\n  }, React.createElement(View, null, playbackInstanceInfo.state === PlaybackStates.Buffering && (props.icon.loading || React.createElement(ActivityIndicator, props.activityIndicator)), playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause, playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play, playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay, (playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay || playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause || playbackInstanceInfo.state === PlaybackStates.Paused && !props.icon.pause) && React.createElement(MaterialIcons, {\n    name: playbackInstanceInfo.state === PlaybackStates.Playing ? 'pause' : playbackInstanceInfo.state === PlaybackStates.Paused ? 'play-arrow' : 'replay',\n    style: props.icon.style,\n    size: props.icon.size,\n    color: props.icon.color\n  }))))))), React.createElement(Animated.View, {\n    style: [styles.bottomInfoWrapper, {\n      opacity: controlsOpacity\n    }]\n  }, props.timeVisible && React.createElement(Text, {\n    style: [props.textStyle, styles.timeLeft]\n  }, getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)), props.slider.visible && React.createElement(Slider, _extends({}, sliderProps, {\n    style: [styles.slider, props.slider.style],\n    value: playbackInstanceInfo.duration ? playbackInstanceInfo.position / playbackInstanceInfo.duration : 0,\n    onSlidingStart: function onSlidingStart() {\n      if (playbackInstanceInfo.state === PlaybackStates.Playing) {\n        togglePlay();\n        setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n          state: PlaybackStates.Paused\n        }));\n      }\n    },\n    onSlidingComplete: function onSlidingComplete(e) {\n      return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n        var position;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                position = e * playbackInstanceInfo.duration;\n\n                if (!playbackInstance) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return playbackInstance.setStatusAsync({\n                  positionMillis: position,\n                  shouldPlay: true\n                });\n\n              case 4:\n                setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n                  position: position\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  })), props.timeVisible && React.createElement(Text, {\n    style: [props.textStyle, styles.timeRight]\n  }, getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)), props.fullscreen.visible && React.createElement(TouchableButton, {\n    onPress: function onPress() {\n      return props.fullscreen.inFullscreen ? props.fullscreen.exitFullscreen() : props.fullscreen.enterFullscreen();\n    }\n  }, React.createElement(View, null, props.icon.fullscreen, props.icon.exitFullscreen, (!props.icon.fullscreen && props.fullscreen.inFullscreen || !props.icon.exitFullscreen && !props.fullscreen.inFullscreen) && React.createElement(MaterialIcons, {\n    name: props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen',\n    style: props.icon.style,\n    size: props.icon.size / 2,\n    color: props.icon.color\n  })))));\n};\n\nVideoPlayer.defaultProps = defaultProps;\nexport default VideoPlayer;","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/node_modules/expo-video-player/dist/index.js"],"names":["__awaiter","__rest","Audio","Video","ControlStates","ErrorSeverity","PlaybackStates","ErrorMessage","TouchableButton","deepMerge","getMinutesSecondsFromMilliseconds","styles","MaterialIcons","defaultProps","useEffect","useRef","useState","React","Slider","VideoPlayer","tempProps","props","playbackInstance","controlsTimer","initialShow","defaultControlsVisible","errorMessage","setErrorMessage","controlsOpacity","Animated","Value","current","Visible","Hidden","controlsState","setControlsState","position","duration","state","videoProps","source","Loading","Error","playbackInstanceInfo","setPlaybackInstanceInfo","_a","slider","sliderRef","ref","sliderProps","screenRatio","style","width","height","videoHeight","videoWidth","setAudio","setStatusAsync","shouldPlay","console","error","Playing","hideAnimation","timing","toValue","animation","fadeOutDuration","useNativeDriver","start","finished","animationToggle","fadeInDuration","setTimeout","clearTimeout","setAudioModeAsync","playsInSilentModeIOS","errorCallback","type","NonFatal","message","obj","updatePlaybackCallback","status","playbackCallback","isLoaded","positionMillis","durationMillis","didJustFinish","Ended","isBuffering","Buffering","Paused","errorMsg","Fatal","togglePlay","backgroundColor","videoBackgroundColor","textStyle","controlsBackgroundColor","justifyContent","icon","loading","activityIndicator","maxWidth","videoWrapper","component","StyleSheet","absoluteFillObject","opacity","alignItems","iconWrapper","pause","play","replay","size","color","bottomInfoWrapper","timeVisible","timeLeft","visible","e","timeRight","fullscreen","inFullscreen","exitFullscreen","enterFullscreen"],"mappings":"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","sourcesContent":["import { __awaiter, __rest } from \"tslib\";\nimport { Audio, Video } from 'expo-av';\nimport { ActivityIndicator, Animated, StyleSheet, Text, TouchableWithoutFeedback, View, } from 'react-native';\nimport { ControlStates, ErrorSeverity, PlaybackStates } from './constants';\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles, } from './utils';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { defaultProps } from './props';\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport Slider from '@react-native-community/slider';\nconst VideoPlayer = (tempProps) => {\n    const props = deepMerge(defaultProps, tempProps);\n    let playbackInstance = null;\n    let controlsTimer = null;\n    let initialShow = props.defaultControlsVisible;\n    const [errorMessage, setErrorMessage] = useState('');\n    const controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\n    const [controlsState, setControlsState] = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden);\n    const [playbackInstanceInfo, setPlaybackInstanceInfo] = useState({\n        position: 0,\n        duration: 0,\n        state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error,\n    });\n    // We need to extract ref, because of misstypes in <Slider />\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = props.slider, { ref: sliderRef } = _a, sliderProps = __rest(_a, [\"ref\"]);\n    const screenRatio = props.style.width / props.style.height;\n    let videoHeight = props.style.height;\n    let videoWidth = videoHeight * screenRatio;\n    if (videoWidth > props.style.width) {\n        videoWidth = props.style.width;\n        videoHeight = videoWidth / screenRatio;\n    }\n    useEffect(() => {\n        setAudio();\n        return () => {\n            if (playbackInstance) {\n                playbackInstance.setStatusAsync({\n                    shouldPlay: false,\n                });\n            }\n        };\n    }, []);\n    useEffect(() => {\n        if (!props.videoProps.source) {\n            console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' +\n                'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\n            setErrorMessage('`Source` is a required in `videoProps`');\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Error }));\n        }\n        else {\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Playing }));\n        }\n    }, [props.videoProps.source]);\n    const hideAnimation = () => {\n        Animated.timing(controlsOpacity, {\n            toValue: 0,\n            duration: props.animation.fadeOutDuration,\n            useNativeDriver: true,\n        }).start(({ finished }) => {\n            if (finished) {\n                setControlsState(ControlStates.Hidden);\n            }\n        });\n    };\n    const animationToggle = () => {\n        if (controlsState === ControlStates.Hidden) {\n            Animated.timing(controlsOpacity, {\n                toValue: 1,\n                duration: props.animation.fadeInDuration,\n                useNativeDriver: true,\n            }).start(({ finished }) => {\n                if (finished) {\n                    setControlsState(ControlStates.Visible);\n                }\n            });\n        }\n        else if (controlsState === ControlStates.Visible) {\n            hideAnimation();\n        }\n        if (controlsTimer === null) {\n            controlsTimer = setTimeout(() => {\n                if (playbackInstanceInfo.state === PlaybackStates.Playing &&\n                    controlsState === ControlStates.Hidden) {\n                    hideAnimation();\n                }\n                if (controlsTimer) {\n                    clearTimeout(controlsTimer);\n                }\n                controlsTimer = null;\n            }, 2000);\n        }\n    };\n    // Set audio mode to play even in silent mode (like the YouTube app)\n    const setAudio = () => __awaiter(void 0, void 0, void 0, function* () {\n        try {\n            yield Audio.setAudioModeAsync({\n                playsInSilentModeIOS: true,\n            });\n        }\n        catch (e) {\n            props.errorCallback({\n                type: ErrorSeverity.NonFatal,\n                message: 'Audio.setAudioModeAsync',\n                obj: e,\n            });\n        }\n    });\n    const updatePlaybackCallback = (status) => {\n        props.playbackCallback(status);\n        if (status.isLoaded) {\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position: status.positionMillis, duration: status.durationMillis || 0, state: status.didJustFinish\n                    ? PlaybackStates.Ended\n                    : status.isBuffering\n                        ? PlaybackStates.Buffering\n                        : status.shouldPlay\n                            ? PlaybackStates.Playing\n                            : PlaybackStates.Paused }));\n            if ((status.didJustFinish && controlsState === ControlStates.Hidden) ||\n                (status.isBuffering && controlsState === ControlStates.Hidden && initialShow)) {\n                animationToggle();\n                initialShow = false;\n            }\n        }\n        else {\n            if (status.isLoaded === false && status.error) {\n                const errorMsg = `Encountered a fatal error during playback: ${status.error}`;\n                setErrorMessage(errorMsg);\n                props.errorCallback({ type: ErrorSeverity.Fatal, message: errorMsg, obj: {} });\n            }\n        }\n    };\n    const togglePlay = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (controlsState === ControlStates.Hidden) {\n            return;\n        }\n        const shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\n        if (playbackInstance !== null) {\n            yield playbackInstance.setStatusAsync(Object.assign({ shouldPlay }, (playbackInstanceInfo.state === PlaybackStates.Ended && { positionMillis: 0 })));\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: playbackInstanceInfo.state === PlaybackStates.Playing\n                    ? PlaybackStates.Paused\n                    : PlaybackStates.Playing }));\n            if (shouldPlay) {\n                animationToggle();\n            }\n        }\n    });\n    if (playbackInstanceInfo.state === PlaybackStates.Error) {\n        return (<View style={{\n                backgroundColor: props.style.videoBackgroundColor,\n                width: videoWidth,\n                height: videoHeight,\n            }}>\n        <ErrorMessage style={props.textStyle} message={errorMessage}/>\n      </View>);\n    }\n    if (playbackInstanceInfo.state === PlaybackStates.Loading) {\n        return (<View style={{\n                backgroundColor: props.style.controlsBackgroundColor,\n                width: videoWidth,\n                height: videoHeight,\n                justifyContent: 'center',\n            }}>\n        {props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>}\n      </View>);\n    }\n    return (<View style={{\n            backgroundColor: props.style.videoBackgroundColor,\n            width: videoWidth,\n            height: videoHeight,\n            maxWidth: '100%',\n        }}>\n      <Video style={styles.videoWrapper} {...props.videoProps} ref={component => {\n            playbackInstance = component;\n            if (props.videoProps.ref) {\n                props.videoProps.ref.current = component;\n            }\n        }} onPlaybackStatusUpdate={updatePlaybackCallback}/>\n\n      <TouchableWithoutFeedback onPress={animationToggle}>\n        <Animated.View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { opacity: controlsOpacity, justifyContent: 'center', alignItems: 'center' })}>\n          <View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { backgroundColor: props.style.controlsBackgroundColor, opacity: 0.5 })}/>\n          <View pointerEvents={controlsState === ControlStates.Visible ? 'auto' : 'none'}>\n            <View style={styles.iconWrapper}>\n              <TouchableButton onPress={togglePlay}>\n                <View>\n                  {playbackInstanceInfo.state === PlaybackStates.Buffering &&\n            (props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>)}\n                  {playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause}\n                  {playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play}\n                  {playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay}\n                  {((playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay) ||\n            (playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause) ||\n            (playbackInstanceInfo.state === PlaybackStates.Paused &&\n                !props.icon.pause)) && (<MaterialIcons name={playbackInstanceInfo.state === PlaybackStates.Playing\n                ? 'pause'\n                : playbackInstanceInfo.state === PlaybackStates.Paused\n                    ? 'play-arrow'\n                    : 'replay'} style={props.icon.style} size={props.icon.size} color={props.icon.color}/>)}\n                </View>\n              </TouchableButton>\n            </View>\n          </View>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n\n      <Animated.View style={[\n            styles.bottomInfoWrapper,\n            {\n                opacity: controlsOpacity,\n            },\n        ]}>\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeLeft]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)}\n          </Text>)}\n        {props.slider.visible && (<Slider {...sliderProps} style={[styles.slider, props.slider.style]} value={playbackInstanceInfo.duration\n                ? playbackInstanceInfo.position / playbackInstanceInfo.duration\n                : 0} onSlidingStart={() => {\n                if (playbackInstanceInfo.state === PlaybackStates.Playing) {\n                    togglePlay();\n                    setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Paused }));\n                }\n            }} onSlidingComplete={(e) => __awaiter(void 0, void 0, void 0, function* () {\n                const position = e * playbackInstanceInfo.duration;\n                if (playbackInstance) {\n                    yield playbackInstance.setStatusAsync({\n                        positionMillis: position,\n                        shouldPlay: true,\n                    });\n                }\n                setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position }));\n            })}/>)}\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeRight]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)}\n          </Text>)}\n        {props.fullscreen.visible && (<TouchableButton onPress={() => props.fullscreen.inFullscreen\n                ? props.fullscreen.exitFullscreen()\n                : props.fullscreen.enterFullscreen()}>\n            <View>\n              {props.icon.fullscreen}\n              {props.icon.exitFullscreen}\n              {((!props.icon.fullscreen && props.fullscreen.inFullscreen) ||\n                (!props.icon.exitFullscreen && !props.fullscreen.inFullscreen)) && (<MaterialIcons name={props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen'} style={props.icon.style} size={props.icon.size / 2} color={props.icon.color}/>)}\n            </View>\n          </TouchableButton>)}\n      </Animated.View>\n    </View>);\n};\nVideoPlayer.defaultProps = defaultProps;\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}