{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { PermissionStatus } from 'expo-modules-core';\n\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying: isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\n\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n\n  getStatusForVideo: function getStatusForVideo(element) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", getStatusFromMedia(element));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  loadForVideo: function loadForVideo(element, nativeSource, fullInitialStatus) {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", getStatusFromMedia(element));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unloadForVideo: function unloadForVideo(element) {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", getStatusFromMedia(element));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setStatusForVideo: function setStatusForVideo(element, status) {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", setStatusForMedia(element, status));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  replayVideo: function replayVideo(element, status) {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", setStatusForMedia(element, status));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setAudioMode: function setAudioMode() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setAudioIsEnabled: function setAudioIsEnabled() {\n    return function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getStatusForSound: function getStatusForSound(element) {\n    return function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", getStatusFromMedia(element));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  loadForSound: function loadForSound(nativeSource, fullInitialStatus) {\n    return function _callee9() {\n      var source, media, status;\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n              media = new Audio(source);\n\n              media.ontimeupdate = function () {\n                SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n                  key: media,\n                  status: getStatusFromMedia(media)\n                });\n              };\n\n              media.onerror = function () {\n                SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n                  key: media,\n                  error: media.error.message\n                });\n              };\n\n              status = setStatusForMedia(media, fullInitialStatus);\n              return _context9.abrupt(\"return\", [media, status]);\n\n            case 6:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unloadForSound: function unloadForSound(element) {\n    return function _callee10() {\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              element.pause();\n              element.removeAttribute('src');\n              element.load();\n              return _context10.abrupt(\"return\", getStatusFromMedia(element));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setStatusForSound: function setStatusForSound(element, status) {\n    return function _callee11() {\n      return _regeneratorRuntime.async(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", setStatusForMedia(element, status));\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  replaySound: function replaySound(element, status) {\n    return function _callee12() {\n      return _regeneratorRuntime.async(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt(\"return\", setStatusForMedia(element, status));\n\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAudioRecordingStatus: function getAudioRecordingStatus() {\n    return function _callee13() {\n      return _regeneratorRuntime.async(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  prepareAudioRecorder: function prepareAudioRecorder() {\n    return function _callee14() {\n      return _regeneratorRuntime.async(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  startAudioRecording: function startAudioRecording() {\n    return function _callee15() {\n      return _regeneratorRuntime.async(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  pauseAudioRecording: function pauseAudioRecording() {\n    return function _callee16() {\n      return _regeneratorRuntime.async(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  stopAudioRecording: function stopAudioRecording() {\n    return function _callee17() {\n      return _regeneratorRuntime.async(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unloadAudioRecorder: function unloadAudioRecorder() {\n    return function _callee18() {\n      return _regeneratorRuntime.async(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getPermissionsAsync: function getPermissionsAsync() {\n    return function _callee19() {\n      return _regeneratorRuntime.async(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              return _context19.abrupt(\"return\", {\n                status: PermissionStatus.DENIED,\n                expires: 'never',\n                canAskAgain: false,\n                granted: false\n              });\n\n            case 1:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  requestPermissionsAsync: function requestPermissionsAsync() {\n    var _this = this;\n\n    return function _callee20() {\n      return _regeneratorRuntime.async(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              return _context20.abrupt(\"return\", _this.getPermissionsAsync());\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":";AAAA,SAAS,wBAAT,QAAyC,kBAAzC;AACA,SAA6B,gBAA7B,QAAqD,mBAArD;;AAIA,SAAS,kBAAT,CAA4B,KAA5B,EAAoD;AAClD,MAAI,CAAC,KAAL,EAAY;AACV,WAAO;AACL,MAAA,QAAQ,EAAE,KADL;AAEL,MAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AAED,MAAM,SAAS,GAAG,CAAC,EACjB,KAAK,CAAC,WAAN,GAAoB,CAApB,IACA,CAAC,KAAK,CAAC,MADP,IAEA,CAAC,KAAK,CAAC,KAFP,IAGA,KAAK,CAAC,UAAN,GAAmB,CAJF,CAAnB;AAOA,MAAM,MAAM,GAAqB;AAC/B,IAAA,QAAQ,EAAE,IADqB;AAE/B,IAAA,GAAG,EAAE,KAAK,CAAC,GAFoB;AAG/B,IAAA,4BAA4B,EAAE,GAHC;AAI/B,IAAA,cAAc,EAAE,KAAK,CAAC,QAAN,GAAiB,IAJF;AAK/B,IAAA,cAAc,EAAE,KAAK,CAAC,WAAN,GAAoB,IALL;AAS/B,IAAA,UAAU,EAAE,KAAK,CAAC,QATa;AAU/B,IAAA,SAAS,EAAT,SAV+B;AAW/B,IAAA,WAAW,EAAE,KAXkB;AAY/B,IAAA,IAAI,EAAE,KAAK,CAAC,YAZmB;AAc/B,IAAA,kBAAkB,EAAE,KAdW;AAe/B,IAAA,MAAM,EAAE,KAAK,CAAC,MAfiB;AAgB/B,IAAA,OAAO,EAAE,KAAK,CAAC,KAhBgB;AAiB/B,IAAA,SAAS,EAAE,KAAK,CAAC,IAjBc;AAkB/B,IAAA,aAAa,EAAE,KAAK,CAAC;AAlBU,GAAjC;AAqBA,SAAO,MAAP;AACD;;AAED,SAAS,iBAAT,CACE,KADF,EAEE,MAFF,EAE+B;AAE7B,MAAI,MAAM,CAAC,cAAP,KAA0B,SAA9B,EAAyC;AACvC,IAAA,KAAK,CAAC,WAAN,GAAoB,MAAM,CAAC,cAAP,GAAwB,IAA5C;AACD;;AAaD,MAAI,MAAM,CAAC,UAAP,KAAsB,SAA1B,EAAqC;AACnC,QAAI,MAAM,CAAC,UAAX,EAAuB;AACrB,MAAA,KAAK,CAAC,IAAN;AACD,KAFD,MAEO;AACL,MAAA,KAAK,CAAC,KAAN;AACD;AACF;;AACD,MAAI,MAAM,CAAC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,IAAA,KAAK,CAAC,YAAN,GAAqB,MAAM,CAAC,IAA5B;AACD;;AACD,MAAI,MAAM,CAAC,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,IAAA,KAAK,CAAC,MAAN,GAAe,MAAM,CAAC,MAAtB;AACD;;AACD,MAAI,MAAM,CAAC,OAAP,KAAmB,SAAvB,EAAkC;AAChC,IAAA,KAAK,CAAC,KAAN,GAAc,MAAM,CAAC,OAArB;AACD;;AACD,MAAI,MAAM,CAAC,SAAP,KAAqB,SAAzB,EAAoC;AAClC,IAAA,KAAK,CAAC,IAAN,GAAa,MAAM,CAAC,SAApB;AACD;;AAED,SAAO,kBAAkB,CAAC,KAAD,CAAzB;AACD;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,YAAP;AACD,GAHY;;AAIP,EAAA,iBAJO,6BAIW,OAJX,EAIoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACxC,kBAAkB,CAAC,OAAD,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhD,GANY;AAOP,EAAA,YAPO,wBAQX,OARW,EASX,YATW,EAUX,iBAVW,EAU6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEjC,kBAAkB,CAAC,OAAD,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGzC,GAbY;AAcP,EAAA,cAdO,0BAcQ,OAdR,EAciC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACrC,kBAAkB,CAAC,OAAD,CADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7C,GAhBY;AAiBP,EAAA,iBAjBO,6BAkBX,OAlBW,EAmBX,MAnBW,EAmBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEtB,iBAAiB,CAAC,OAAD,EAAU,MAAV,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG9B,GAtBY;AAuBP,EAAA,WAvBO,uBAwBX,OAxBW,EAyBX,MAzBW,EAyBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEtB,iBAAiB,CAAC,OAAD,EAAU,MAAV,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG9B,GA5BY;AA8BP,EAAA,YA9BO,0BA8BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GA9BV;AA+BP,EAAA,iBA/BO,+BA+BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GA/Bf;AAgCP,EAAA,iBAhCO,6BAgCW,OAhCX,EAgCoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACxC,kBAAkB,CAAC,OAAD,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhD,GAlCY;AAmCP,EAAA,YAnCO,wBAoCX,YApCW,EAqCX,iBArCW,EAqC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAElC,cAAA,MAFkC,GAEzB,OAAO,YAAP,KAAwB,QAAxB,GAAmC,YAAnC,GAAkD,YAAY,CAAC,GAFtC;AAGlC,cAAA,KAHkC,GAG1B,IAAI,KAAJ,CAAU,MAAV,CAH0B;;AAKxC,cAAA,KAAK,CAAC,YAAN,GAAqB,YAAK;AACxB,gBAAA,wBAAwB,CAAC,IAAzB,CAA8B,yBAA9B,EAAyD;AACvD,kBAAA,GAAG,EAAE,KADkD;AAEvD,kBAAA,MAAM,EAAE,kBAAkB,CAAC,KAAD;AAF6B,iBAAzD;AAID,eALD;;AAOA,cAAA,KAAK,CAAC,OAAN,GAAgB,YAAK;AACnB,gBAAA,wBAAwB,CAAC,IAAzB,CAA8B,oBAA9B,EAAoD;AAClD,kBAAA,GAAG,EAAE,KAD6C;AAElD,kBAAA,KAAK,EAAE,KAAK,CAAC,KAAN,CAAa;AAF8B,iBAApD;AAID,eALD;;AAOM,cAAA,MAnBkC,GAmBzB,iBAAiB,CAAC,KAAD,EAAQ,iBAAR,CAnBQ;AAAA,gDAqBjC,CAAC,KAAD,EAAQ,MAAR,CArBiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBzC,GA3DY;AA4DP,EAAA,cA5DO,0BA4DQ,OA5DR,EA4DiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5C,cAAA,OAAO,CAAC,KAAR;AACA,cAAA,OAAO,CAAC,eAAR,CAAwB,KAAxB;AACA,cAAA,OAAO,CAAC,IAAR;AAH4C,iDAIrC,kBAAkB,CAAC,OAAD,CAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7C,GAjEY;AAkEP,EAAA,iBAlEO,6BAmEX,OAnEW,EAoEX,MApEW,EAoEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAEtB,iBAAiB,CAAC,OAAD,EAAU,MAAV,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG9B,GAvEY;AAwEP,EAAA,WAxEO,uBAyEX,OAzEW,EA0EX,MA1EW,EA0EkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAEtB,iBAAiB,CAAC,OAAD,EAAU,MAAV,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG9B,GA7EY;AAiFP,EAAA,uBAjFO,qCAiFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GAjFrB;AAkFP,EAAA,oBAlFO,kCAkFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GAlFlB;AAmFP,EAAA,mBAnFO,iCAmFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GAnFjB;AAoFP,EAAA,mBApFO,iCAoFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GApFjB;AAqFP,EAAA,kBArFO,gCAqFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GArFhB;AAsFP,EAAA,mBAtFO,iCAsFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAK,GAtFjB;AAyFP,EAAA,mBAzFO,iCAyFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAChB;AACL,gBAAA,MAAM,EAAE,gBAAgB,CAAC,MADpB;AAEL,gBAAA,OAAO,EAAE,OAFJ;AAGL,gBAAA,WAAW,EAAE,KAHR;AAIL,gBAAA,OAAO,EAAE;AAJJ,eADgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOxB,GAhGY;AAmGP,EAAA,uBAnGO,qCAmGgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACpB,KAAI,CAAC,mBAAL,EADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE5B;AArGY,CAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'expo-modules-core';\n\nimport { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV';\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: AVPlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(\n  media: HTMLMediaElement,\n  status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: AVPlaybackNativeSource,\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {},\n  async prepareAudioRecorder() {},\n  async startAudioRecording() {},\n  async pauseAudioRecording() {},\n  async stopAudioRecording() {},\n  async unloadAudioRecorder() {},\n\n  // Recording isn't available on the web\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    return {\n      status: PermissionStatus.DENIED,\n      expires: 'never',\n      canAskAgain: false,\n      granted: false,\n    };\n  },\n\n  // Recording isn't available on the web\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return this.getPermissionsAsync();\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}