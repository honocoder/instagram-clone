{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport firebase from 'firebase';\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Snackbar } from 'react-native-paper';\nimport { container, form } from \"../styles\";\n\nrequire('firebase/firestore');\n\nexport default function Register(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      username = _useState8[0],\n      setUsername = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isValid = _useState10[0],\n      setIsValid = _useState10[1];\n\n  var onRegister = function onRegister() {\n    if (name.lenght == 0 || username.lenght == 0 || email.length == 0 || password.length == 0) {\n      setIsValid({\n        bool: true,\n        boolSnack: true,\n        message: \"Please fill out everything\"\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      setIsValid({\n        bool: true,\n        boolSnack: true,\n        message: \"passwords must be at least 6 characters\"\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      setIsValid({\n        bool: true,\n        boolSnack: true,\n        message: \"passwords must be at least 6 characters\"\n      });\n      return;\n    }\n\n    firebase.firestore().collection('users').where('username', '==', username).get().then(function (snapshot) {\n      if (!snapshot.exist) {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(function () {\n          if (snapshot.exist) {\n            return;\n          }\n\n          firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).set({\n            name: name,\n            email: email,\n            username: username,\n            image: 'default',\n            followingCount: 0,\n            followersCount: 0\n          });\n        }).catch(function () {\n          setIsValid({\n            bool: true,\n            boolSnack: true,\n            message: \"Something went wrong\"\n          });\n        });\n      }\n    }).catch(function () {\n      setIsValid({\n        bool: true,\n        boolSnack: true,\n        message: \"Something went wrong\"\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    style: container.center\n  }, React.createElement(View, {\n    style: container.formCenter\n  }, React.createElement(TextInput, {\n    style: form.textInput,\n    placeholder: \"Username\",\n    value: username,\n    keyboardType: \"twitter\",\n    onChangeText: function onChangeText(username) {\n      return setUsername(username.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/\\s+/g, '').replace(/[^a-z0-9]/gi, ''));\n    }\n  }), React.createElement(TextInput, {\n    style: form.textInput,\n    placeholder: \"name\",\n    onChangeText: function onChangeText(name) {\n      return setName(name);\n    }\n  }), React.createElement(TextInput, {\n    style: form.textInput,\n    placeholder: \"email\",\n    onChangeText: function onChangeText(email) {\n      return setEmail(email);\n    }\n  }), React.createElement(TextInput, {\n    style: form.textInput,\n    placeholder: \"password\",\n    secureTextEntry: true,\n    onChangeText: function onChangeText(password) {\n      return setPassword(password);\n    }\n  }), React.createElement(Button, {\n    style: form.button,\n    onPress: function onPress() {\n      return onRegister();\n    },\n    title: \"Register\"\n  })), React.createElement(View, {\n    style: form.bottomButton\n  }, React.createElement(Text, {\n    onPress: function onPress() {\n      return props.navigation.navigate(\"Login\");\n    }\n  }, \"Already have an account? SignIn.\")), React.createElement(Snackbar, {\n    visible: isValid.boolSnack,\n    duration: 2000,\n    onDismiss: function onDismiss() {\n      setIsValid({\n        boolSnack: false\n      });\n    }\n  }, isValid.message));\n}","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/components/auth/Register.js"],"names":["firebase","React","useState","Snackbar","container","form","require","Register","props","email","setEmail","password","setPassword","name","setName","username","setUsername","isValid","setIsValid","onRegister","lenght","length","bool","boolSnack","message","firestore","collection","where","get","then","snapshot","exist","auth","createUserWithEmailAndPassword","doc","currentUser","uid","set","image","followingCount","followersCount","catch","center","formCenter","textInput","normalize","replace","button","bottomButton","navigation","navigate"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport React, { useState } from 'react';\nimport { Button, Text, TextInput, View } from 'react-native';\nimport { Snackbar } from 'react-native-paper';\nimport { container, form } from '../styles';\n\n\nrequire('firebase/firestore');\n\nexport default function Register(props) {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [name, setName] = useState('');\n    const [username, setUsername] = useState('');\n    const [isValid, setIsValid] = useState(true);\n\n    const onRegister = () => {\n        if (name.lenght == 0 || username.lenght == 0 || email.length == 0 || password.length == 0) {\n            setIsValid({ bool: true, boolSnack: true, message: \"Please fill out everything\" })\n            return;\n        }\n        if (password.length < 6) {\n            setIsValid({ bool: true, boolSnack: true, message: \"passwords must be at least 6 characters\" })\n            return;\n        }\n        if (password.length < 6) {\n            setIsValid({ bool: true, boolSnack: true, message: \"passwords must be at least 6 characters\" })\n            return;\n        }\n        firebase.firestore()\n            .collection('users')\n            .where('username', '==', username)\n            .get()\n            .then((snapshot) => {\n\n                if (!snapshot.exist) {\n                    firebase.auth().createUserWithEmailAndPassword(email, password)\n                        .then(() => {\n                            if (snapshot.exist) {\n                                return\n                            }\n                            firebase.firestore().collection(\"users\")\n                                .doc(firebase.auth().currentUser.uid)\n                                .set({\n                                    name,\n                                    email,\n                                    username,\n                                    image: 'default',\n                                    followingCount: 0,\n                                    followersCount: 0,\n\n                                })\n                        })\n                        .catch(() => {\n                            setIsValid({ bool: true, boolSnack: true, message: \"Something went wrong\" })\n                        })\n                }\n            }).catch(() => {\n                setIsValid({ bool: true, boolSnack: true, message: \"Something went wrong\" })\n            })\n\n    }\n\n    return (\n        <View style={container.center}>\n            <View style={container.formCenter}>\n                <TextInput\n                    style={form.textInput}\n                    placeholder=\"Username\"\n                    value={username}\n                    keyboardType=\"twitter\"\n                    onChangeText={(username) => setUsername(username.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/\\s+/g, '').replace(/[^a-z0-9]/gi, ''))}\n                />\n                <TextInput\n                    style={form.textInput}\n                    placeholder=\"name\"\n                    onChangeText={(name) => setName(name)}\n                />\n                <TextInput\n                    style={form.textInput}\n                    placeholder=\"email\"\n                    onChangeText={(email) => setEmail(email)}\n                />\n                <TextInput\n                    style={form.textInput}\n                    placeholder=\"password\"\n                    secureTextEntry={true}\n                    onChangeText={(password) => setPassword(password)}\n                />\n\n                <Button\n                    style={form.button}\n                    onPress={() => onRegister()}\n                    title=\"Register\"\n                />\n            </View>\n\n            <View style={form.bottomButton} >\n                <Text\n                    onPress={() => props.navigation.navigate(\"Login\")} >\n                    Already have an account? SignIn.\n                </Text>\n            </View>\n            <Snackbar\n                visible={isValid.boolSnack}\n                duration={2000}\n                onDismiss={() => { setIsValid({ boolSnack: false }) }}>\n                {isValid.message}\n            </Snackbar>\n        </View>\n\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}