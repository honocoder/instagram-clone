{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport firebase from 'firebase';\nimport { Constants } from 'react-native-unimodules';\nimport { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from \"../constants/index\";\n\nrequire('firebase/firestore');\n\nvar unsubscribe = [];\nexport function clearData() {\n  return function (dispatch) {\n    for (var i = unsubscribe; i < unsubscribe.length; i++) {\n      unsubscribe[i]();\n    }\n\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function reload() {\n  return function (dispatch) {\n    dispatch(clearData());\n    dispatch(fetchUser());\n    dispatch(setNotificationService());\n    dispatch(fetchUserPosts());\n    dispatch(fetchUserFollowing());\n    dispatch(fetchUserChats());\n  };\n}\nexport var setNotificationService = function setNotificationService() {\n  return function _callee(dispatch) {\n    var token, existingStatus, finalStatus, status;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context2.next = 18;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            existingStatus = _context2.sent;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus.status !== 'granted')) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 8:\n            status = _context2.sent;\n            finalStatus = status;\n\n          case 10:\n            if (!(finalStatus.status !== 'granted')) {\n              _context2.next = 13;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context2.abrupt(\"return\");\n\n          case 13:\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 15:\n            token = _context2.sent;\n            _context2.next = 19;\n            break;\n\n          case 18:\n            alert('Must use physical device for Push Notifications');\n\n          case 19:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            Notifications.setNotificationHandler({\n              handleNotification: function handleNotification() {\n                return _regeneratorRuntime.async(function handleNotification$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", {\n                          shouldShowAlert: true,\n                          shouldPlaySound: false,\n                          shouldSetBadge: false\n                        });\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }\n            });\n\n            if (token != undefined) {\n              firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).update({\n                notificationToken: token.data\n              });\n            }\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var sendNotification = function sendNotification(to, title, body, data) {\n  return function (dispatch) {\n    if (to == null) {\n      return;\n    }\n\n    var response = fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        to: to,\n        sound: 'default',\n        title: title,\n        body: body,\n        data: data\n      })\n    });\n  };\n};\nexport function fetchUser() {\n  return function (dispatch) {\n    var listener = firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot, error) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: _objectSpread({\n            uid: firebase.auth().currentUser.uid\n          }, snapshot.data())\n        });\n      }\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function fetchUserChats() {\n  return function (dispatch) {\n    var listener = firebase.firestore().collection(\"chats\").where(\"users\", \"array-contains\", firebase.auth().currentUser.uid).orderBy(\"lastMessageTimestamp\", \"desc\").onSnapshot(function (snapshot) {\n      var chats = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n\n      for (var i = 0; i < chats.length; i++) {\n        var otherUserId = void 0;\n\n        if (chats[i].users[0] == firebase.auth().currentUser.uid) {\n          otherUserId = chats[i].users[1];\n        } else {\n          otherUserId = chats[i].users[0];\n        }\n\n        dispatch(fetchUsersData(otherUserId, false));\n      }\n\n      dispatch({\n        type: USER_CHATS_STATE_CHANGE,\n        chats: chats\n      });\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"desc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    var listener = firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split('/')[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    var listener = firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.id;\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n    unsubscribe.push(listener);\n  };\n}\nexport function queryUsersByUsername(username) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      if (username.length == 0) {\n        resolve([]);\n      }\n\n      firebase.firestore().collection('users').where('username', '>=', username).limit(10).get().then(function (snapshot) {\n        var users = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        resolve(users);\n      });\n    });\n  };\n}\nexport function deletePost(item) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").doc(item.id).delete().then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/redux/actions/index.js"],"names":["Notifications","firebase","Constants","CLEAR_DATA","USERS_DATA_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USER_CHATS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_STATE_CHANGE","require","unsubscribe","clearData","dispatch","i","length","type","reload","fetchUser","setNotificationService","fetchUserPosts","fetchUserFollowing","fetchUserChats","isDevice","getPermissionsAsync","existingStatus","finalStatus","status","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","undefined","firestore","collection","doc","auth","currentUser","uid","update","notificationToken","data","sendNotification","to","title","body","response","fetch","method","headers","Accept","JSON","stringify","sound","listener","onSnapshot","snapshot","error","exists","push","where","orderBy","chats","docs","map","id","otherUserId","users","fetchUsersData","get","then","posts","following","getPosts","getState","found","usersState","some","el","user","fetchUsersFollowingPosts","ref","path","split","find","fetchUsersFollowingLikes","postId","currentUserLike","queryUsersByUsername","username","Promise","resolve","reject","limit","deletePost","item","delete","catch"],"mappings":"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","sourcesContent":["import * as Notifications from 'expo-notifications';\nimport firebase from 'firebase';\nimport { Constants } from 'react-native-unimodules';\nimport { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from '../constants/index';\nrequire('firebase/firestore')\n\n\nlet unsubscribe = [];\n\nexport function clearData() {\n    return ((dispatch) => {\n        for (let i = unsubscribe; i < unsubscribe.length; i++) {\n            unsubscribe[i]();\n        }\n        dispatch({ type: CLEAR_DATA })\n    })\n}\nexport function reload() {\n    return ((dispatch) => {\n        dispatch(clearData())\n        dispatch(fetchUser())\n        dispatch(setNotificationService())\n        dispatch(fetchUserPosts())\n        dispatch(fetchUserFollowing())\n        dispatch(fetchUserChats())\n\n    })\n}\n\nexport const setNotificationService = () => async dispatch => {\n    let token;\n    if (Constants.isDevice) {\n        const existingStatus = await Notifications.getPermissionsAsync();\n        let finalStatus = existingStatus;\n        if (existingStatus.status !== 'granted') {\n            const status = await Notifications.requestPermissionsAsync();\n            finalStatus = status;\n        }\n\n        if (finalStatus.status !== 'granted') {\n            alert('Failed to get push token for push notification!');\n            return;\n        }\n        token = (await Notifications.getExpoPushTokenAsync());\n    } else {\n        alert('Must use physical device for Push Notifications');\n    }\n\n    if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n            name: 'default',\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#FF231F7C',\n        });\n    }\n\n    Notifications.setNotificationHandler({\n        handleNotification: async () => ({\n            shouldShowAlert: true,\n            shouldPlaySound: false,\n            shouldSetBadge: false,\n        }),\n    });\n\n    if (token != undefined) {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .update({\n                notificationToken: token.data,\n            })\n    }\n\n}\n\nexport const sendNotification = (to, title, body, data) => dispatch => {\n    if (to == null) {\n        return;\n    }\n\n    let response = fetch('https://exp.host/--/api/v2/push/send', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            to,\n            sound: 'default',\n            title,\n            body,\n            data\n        })\n    })\n\n}\n\nexport function fetchUser() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot, error) => {\n                if (snapshot.exists) {\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: { uid: firebase.auth().currentUser.uid, ...snapshot.data() } })\n                }\n            })\n        unsubscribe.push(listener)\n    })\n}\n\nexport function fetchUserChats() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"chats\")\n            .where(\"users\", \"array-contains\", firebase.auth().currentUser.uid)\n            .orderBy(\"lastMessageTimestamp\", \"desc\")\n            .onSnapshot((snapshot) => {\n                let chats = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n\n                for (let i = 0; i < chats.length; i++) {\n                    let otherUserId;\n                    if (chats[i].users[0] == firebase.auth().currentUser.uid) {\n                        otherUserId = chats[i].users[1];\n                    } else {\n                        otherUserId = chats[i].users[0];\n                    }\n                    dispatch(fetchUsersData(otherUserId, false))\n                }\n\n                dispatch({ type: USER_CHATS_STATE_CHANGE, chats })\n            })\n        unsubscribe.push(listener)\n    })\n}\nexport function fetchUserPosts() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"desc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\n\nexport function fetchUserFollowing() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {\n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true));\n                }\n            })\n        unsubscribe.push(listener)\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return ((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid);\n        if (!found) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n                    }\n                })\n            if (getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    })\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.docs[0].ref.path.split('/')[1];\n                const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n\n                for (let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return ((dispatch, getState) => {\n        let listener = firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.id;\n\n                let currentUserLike = false;\n                if (snapshot.exists) {\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n        unsubscribe.push(listener)\n    })\n}\n\n\n\nexport function queryUsersByUsername(username) {\n    return ((dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            if (username.length == 0) {\n                resolve([])\n            }\n            firebase.firestore()\n                .collection('users')\n                .where('username', '>=', username)\n                .limit(10)\n                .get()\n                .then((snapshot) => {\n                    let users = snapshot.docs.map(doc => {\n                        const data = doc.data();\n                        const id = doc.id;\n                        return { id, ...data }\n                    });\n                    resolve(users);\n                })\n        })\n    })\n}\n\n\nexport function deletePost(item) {\n    return ((dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            firebase.firestore()\n                .collection('posts')\n                .doc(firebase.auth().currentUser.uid)\n                .collection(\"userPosts\")\n                .doc(item.id)\n                .delete()\n                .then(() => {\n                    resolve();\n                }).catch(() => {\n                    reject();\n                })\n        })\n    })\n}\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}