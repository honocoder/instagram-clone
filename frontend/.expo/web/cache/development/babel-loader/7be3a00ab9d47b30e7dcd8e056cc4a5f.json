{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\n\nvar CachedImage = function CachedImage(props) {\n  var uri = props.source.uri,\n      cacheKey = props.cacheKey;\n  var filesystemURI = \"\" + FileSystem.cacheDirectory + cacheKey;\n\n  var _useState = useState(filesystemURI),\n      _useState2 = _slicedToArray(_useState, 2),\n      imgURI = _useState2[0],\n      setImgURI = _useState2[1];\n\n  var componentIsMounted = useRef(true);\n  useEffect(function () {\n    var loadImage = function loadImage(_ref) {\n      var fileURI, metadata;\n      return _regeneratorRuntime.async(function loadImage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fileURI = _ref.fileURI;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(fileURI));\n\n            case 4:\n              metadata = _context.sent;\n\n              if (metadata.exists) {\n                _context.next = 11;\n                break;\n              }\n\n              if (!componentIsMounted.current) {\n                _context.next = 10;\n                break;\n              }\n\n              setImgURI(null);\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(FileSystem.downloadAsync(uri, fileURI));\n\n            case 10:\n              if (componentIsMounted.current) {\n                setImgURI(fileURI);\n              }\n\n            case 11:\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              setImgURI(uri);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 13]], Promise);\n    };\n\n    loadImage({\n      fileURI: filesystemURI\n    });\n    return function () {\n      componentIsMounted.current = false;\n    };\n  }, []);\n  return React.createElement(Image, _extends({}, props, {\n    source: {\n      uri: imgURI\n    }\n  }));\n};\n\nCachedImage.propTypes = {\n  source: PropTypes.object.isRequired,\n  cacheKey: PropTypes.string.isRequired\n};\nexport default CachedImage;","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/components/main/random/CachedImage.js"],"names":["FileSystem","PropTypes","React","useEffect","useRef","useState","CachedImage","props","uri","source","cacheKey","filesystemURI","cacheDirectory","imgURI","setImgURI","componentIsMounted","loadImage","fileURI","getInfoAsync","metadata","exists","current","downloadAsync","propTypes","object","isRequired","string"],"mappings":";;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MAAkBC,GAAlB,GAAsCD,KAAtC,CAAQE,MAAR,CAAkBD,GAAlB;AAAA,MAAyBE,QAAzB,GAAsCH,KAAtC,CAAyBG,QAAzB;AACA,MAAMC,aAAa,QAAMX,UAAU,CAACY,cAAjB,GAAkCF,QAArD;;AAEA,kBAA4BL,QAAQ,CAACM,aAAD,CAApC;AAAA;AAAA,MAAOE,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,kBAAkB,GAAGX,MAAM,CAAC,IAAD,CAAjC;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,OAAT,QAASA,OAAT;AAAA;AAAA;AAAA,+CAGSjB,UAAU,CAACkB,YAAX,CAAwBD,OAAxB,CAHT;;AAAA;AAGRE,cAAAA,QAHQ;;AAAA,kBAITA,QAAQ,CAACC,MAJA;AAAA;AAAA;AAAA;;AAAA,mBAMRL,kBAAkB,CAACM,OANX;AAAA;AAAA;AAAA;;AAOVP,cAAAA,SAAS,CAAC,IAAD,CAAT;AAPU;AAAA,+CAQJd,UAAU,CAACsB,aAAX,CACJd,GADI,EAEJS,OAFI,CARI;;AAAA;AAaZ,kBAAIF,kBAAkB,CAACM,OAAvB,EAAgC;AAC9BP,gBAAAA,SAAS,CAACG,OAAD,CAAT;AACD;;AAfW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBdH,cAAAA,SAAS,CAACN,GAAD,CAAT;;AAlBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAsBAQ,IAAAA,SAAS,CAAC;AAAEC,MAAAA,OAAO,EAAEN;AAAX,KAAD,CAAT;AAEA,WAAO,YAAM;AACXI,MAAAA,kBAAkB,CAACM,OAAnB,GAA6B,KAA7B;AACD,KAFD;AAGD,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,SACE,oBAAC,KAAD,eAEMd,KAFN;AAGE,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEK;AADC;AAHV,KADF;AASD,CA/CD;;AAiDAP,WAAW,CAACiB,SAAZ,GAAwB;AACtBd,EAAAA,MAAM,EAAER,SAAS,CAACuB,MAAV,CAAiBC,UADH;AAEtBf,EAAAA,QAAQ,EAAET,SAAS,CAACyB,MAAV,CAAiBD;AAFL,CAAxB;AAKA,eAAenB,WAAf","sourcesContent":["import * as FileSystem from 'expo-file-system'\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Image } from 'react-native'\n\n\n\n\nconst CachedImage = props => {\n  const { source: { uri }, cacheKey } = props\n  const filesystemURI = `${FileSystem.cacheDirectory}${cacheKey}`\n\n  const [imgURI, setImgURI] = useState(filesystemURI)\n\n  const componentIsMounted = useRef(true)\n\n  useEffect(() => {\n    const loadImage = async ({ fileURI }) => {\n      try {\n        // Use the cached image if it exists\n        const metadata = await FileSystem.getInfoAsync(fileURI)\n        if (!metadata.exists) {\n          // download to cache\n          if (componentIsMounted.current) {\n            setImgURI(null)\n            await FileSystem.downloadAsync(\n              uri,\n              fileURI\n            )\n          }\n          if (componentIsMounted.current) {\n            setImgURI(fileURI)\n          }\n        }\n      } catch (err) {\n        setImgURI(uri)\n      }\n    }\n\n    loadImage({ fileURI: filesystemURI })\n\n    return () => {\n      componentIsMounted.current = false\n    }\n  }, [])// eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Image\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...props}\n      source={{\n        uri: imgURI,\n      }}\n    />\n  )\n}\n\nCachedImage.propTypes = {\n  source: PropTypes.object.isRequired,\n  cacheKey: PropTypes.string.isRequired,\n}\n\nexport default CachedImage\n"]},"metadata":{},"sourceType":"module"}