{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as Notifications from 'expo-notifications';\nimport firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { reload } from \"../redux/actions/index\";\nimport CameraScreen from \"./main/add/Camera\";\nimport ChatListScreen from \"./main/chat/List\";\nimport FeedScreen from \"./main/post/Feed\";\nimport ProfileScreen from \"./main/profile/Profile\";\nimport SearchScreen from \"./main/profile/Search\";\nvar Tab = createMaterialBottomTabNavigator();\n\nfunction Main(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      unreadChats = _useState2[0],\n      setUnreadChats = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastNot = _useState4[0],\n      setLastNot = _useState4[1];\n\n  var lastNotificationResponse = Notifications.useLastNotificationResponse();\n\n  if (lastNotificationResponse != null && lastNotificationResponse != lastNot) {\n    setLastNot(lastNotificationResponse);\n\n    switch (lastNotificationResponse.notification.request.content.data.type) {\n      case 0:\n        props.navigation.navigate(\"Post\", {\n          item: lastNotificationResponse.notification.request.content.data.postId,\n          user: lastNotificationResponse.notification.request.content.data.user,\n          notification: true\n        });\n        break;\n\n      case 1:\n        props.navigation.navigate(\"Chat\", {\n          user: lastNotificationResponse.notification.request.content.data.user,\n          notification: true\n        });\n        break;\n\n      case 2:\n        props.navigation.navigate(\"ProfileOther\", {\n          uid: lastNotificationResponse.notification.request.content.data.user,\n          username: undefined,\n          notification: true\n        });\n        break;\n    }\n  }\n\n  useEffect(function () {\n    props.reload();\n    Notifications.addNotificationResponseReceivedListener(function (notification) {\n      switch (notification.notification.request.content.data.type) {\n        case \"post\":\n          props.navigation.navigate(\"Post\", {\n            item: notification.notification.request.content.data.postId,\n            user: notification.notification.request.content.data.user,\n            notification: true\n          });\n          break;\n\n        case \"chat\":\n          props.navigation.navigate(\"Chat\", {\n            user: notification.notification.request.content.data.user,\n            notification: true\n          });\n          break;\n\n        case \"profile\":\n          props.navigation.navigate(\"ProfileOther\", {\n            uid: notification.notification.request.content.data.user,\n            username: undefined,\n            notification: true\n          });\n          break;\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (props.currentUser != null) {\n      if (props.currentUser.banned) {\n        props.navigation.navigate(\"Blocked\");\n      }\n    }\n\n    setUnreadChats(false);\n\n    for (var i = 0; i < props.chats.length; i++) {\n      if (!props.chats[i][firebase.auth().currentUser.uid]) {\n        setUnreadChats(true);\n      }\n    }\n  }, [props.currentUser, props.chats]);\n\n  if (props.currentUser == null) {\n    return React.createElement(View, null);\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    }\n  }, React.createElement(Tab.Navigator, {\n    initialRouteName: \"Feed\",\n    labeled: false,\n    tabBarOptions: {\n      showIcon: true,\n      showLabel: false,\n      indicatorStyle: {\n        opacity: 0\n      }\n    },\n    barStyle: {\n      backgroundColor: '#ffffff'\n    }\n  }, React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Feed\",\n    component: FeedScreen,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref) {\n        var color = _ref.color,\n            size = _ref.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"home\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Search\",\n    component: SearchScreen,\n    navigation: props.navigation,\n    options: {\n      tabBarLabel: 'Seach',\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var color = _ref2.color,\n            size = _ref2.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"magnify\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"Camera\",\n    component: CameraScreen,\n    navigation: props.navigation,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref3) {\n        var color = _ref3.color,\n            size = _ref3.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"camera\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    key: Date.now(),\n    name: \"chat\",\n    component: ChatListScreen,\n    navigation: props.navigation,\n    share: false,\n    options: {\n      tabBarIcon: function tabBarIcon(_ref4) {\n        var color = _ref4.color,\n            size = _ref4.size;\n        return React.createElement(View, null, unreadChats ? React.createElement(View, {\n          style: {\n            backgroundColor: 'red',\n            width: 10,\n            height: 10,\n            position: 'absolute',\n            right: 0,\n            borderRadius: 100\n          }\n        }) : null, React.createElement(View, null), React.createElement(MaterialCommunityIcons, {\n          name: \"chat\",\n          color: color,\n          size: 26\n        }));\n      }\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Profile\",\n    component: ProfileScreen,\n    navigation: props.navigation,\n    listeners: function listeners(_ref5) {\n      var navigation = _ref5.navigation;\n      return {\n        tabPress: function tabPress(event) {\n          event.preventDefault();\n          navigation.navigate(\"Profile\", {\n            uid: firebase.auth().currentUser.uid\n          });\n        }\n      };\n    },\n    options: {\n      tabBarIcon: function tabBarIcon(_ref6) {\n        var color = _ref6.color,\n            size = _ref6.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"account-circle\",\n          color: color,\n          size: 26\n        });\n      }\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser,\n    chats: store.userState.chats,\n    friendsRequestsReceived: store.userState.friendsRequestsReceived\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    reload: reload\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);","map":{"version":3,"sources":["/Users/jimymarletta/Downloads/instagram_redesign_release_v2/frontend/components/Main.js"],"names":["createMaterialBottomTabNavigator","Notifications","firebase","React","useEffect","useState","MaterialCommunityIcons","connect","bindActionCreators","reload","CameraScreen","ChatListScreen","FeedScreen","ProfileScreen","SearchScreen","Tab","Main","props","unreadChats","setUnreadChats","lastNot","setLastNot","lastNotificationResponse","useLastNotificationResponse","notification","request","content","data","type","navigation","navigate","item","postId","user","uid","username","undefined","addNotificationResponseReceivedListener","currentUser","banned","i","chats","length","auth","flex","backgroundColor","showIcon","showLabel","indicatorStyle","opacity","Date","now","tabBarIcon","color","size","tabBarLabel","width","height","position","right","borderRadius","tabPress","event","preventDefault","mapStateToProps","store","userState","friendsRequestsReceived","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as Notifications from 'expo-notifications';\nimport firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { reload } from '../redux/actions/index';\nimport CameraScreen from './main/add/Camera';\nimport ChatListScreen from './main/chat/List';\nimport FeedScreen from './main/post/Feed';\nimport ProfileScreen from './main/profile/Profile';\nimport SearchScreen from './main/profile/Search';\n\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction Main(props) {\n    const [unreadChats, setUnreadChats] = useState(false)\n    const [lastNot, setLastNot] = useState(false)\n\n    const lastNotificationResponse = Notifications.useLastNotificationResponse();\n\n\n    if (lastNotificationResponse != null && lastNotificationResponse != lastNot) {\n        setLastNot(lastNotificationResponse)\n        switch (lastNotificationResponse.notification.request.content.data.type) {\n            case 0:\n                props.navigation.navigate(\"Post\", { item: lastNotificationResponse.notification.request.content.data.postId, user: lastNotificationResponse.notification.request.content.data.user, notification: true })\n                break;\n            case 1:\n                props.navigation.navigate(\"Chat\", { user: lastNotificationResponse.notification.request.content.data.user, notification: true })\n                break;\n            case 2:\n                props.navigation.navigate(\"ProfileOther\", { uid: lastNotificationResponse.notification.request.content.data.user, username: undefined, notification: true })\n                break;\n        }\n    }\n    useEffect(() => {\n        props.reload();\n        Notifications.addNotificationResponseReceivedListener((notification) => {\n            switch (notification.notification.request.content.data.type) {\n                case \"post\":\n                    props.navigation.navigate(\"Post\", { item: notification.notification.request.content.data.postId, user: notification.notification.request.content.data.user, notification: true })\n                    break;\n                case \"chat\":\n                    props.navigation.navigate(\"Chat\", { user: notification.notification.request.content.data.user, notification: true })\n                    break;\n                case \"profile\":\n                    props.navigation.navigate(\"ProfileOther\", { uid: notification.notification.request.content.data.user, username: undefined, notification: true })\n                    break;\n            }\n        });\n\n\n    }, [])\n\n    useEffect(() => {\n        if (props.currentUser != null) {\n            if (props.currentUser.banned) {\n                props.navigation.navigate(\"Blocked\")\n            }\n        }\n        setUnreadChats(false)\n        for (let i = 0; i < props.chats.length; i++) {\n            if (!props.chats[i][firebase.auth().currentUser.uid]) {\n\n                setUnreadChats(true)\n            }\n        }\n    }, [props.currentUser, props.chats])\n\n    if (props.currentUser == null) {\n        return (<View></View>)\n    }\n\n    return (\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\n            <Tab.Navigator initialRouteName=\"Feed\"\n\n                labeled={false}\n                tabBarOptions={{\n                    showIcon: true, showLabel: false, indicatorStyle: {\n                        opacity: 0\n                    }\n                }}\n                barStyle={{ backgroundColor: '#ffffff' }}>\n                <Tab.Screen key={Date.now()} name=\"Feed\" component={FeedScreen}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"Search\" component={SearchScreen} navigation={props.navigation}\n                    options={{\n                        tabBarLabel: 'Seach',\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"magnify\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"Camera\" component={CameraScreen} navigation={props.navigation}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"camera\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"chat\" component={ChatListScreen} navigation={props.navigation} share={false}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n\n                            <View>\n\n                                {unreadChats ?\n                                    <View style={{ backgroundColor: 'red', width: 10, height: 10, position: 'absolute', right: 0, borderRadius: 100 }}></View>\n\n                                    :\n                                    null\n                                }\n                                <View />\n\n                                <MaterialCommunityIcons name=\"chat\" color={color} size={26} />\n                            </View>\n                        ),\n                    }} />\n                <Tab.Screen name=\"Profile\" component={ProfileScreen} navigation={props.navigation}\n                    listeners={({ navigation }) => ({\n                        tabPress: event => {\n                            event.preventDefault();\n                            navigation.navigate(\"Profile\", { uid: firebase.auth().currentUser.uid })\n                        }\n                    })}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"account-circle\" color={color} size={26} />\n                        ),\n                    }} />\n            </Tab.Navigator>\n        </View>\n\n    )\n}\n\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    chats: store.userState.chats,\n    friendsRequestsReceived: store.userState.friendsRequestsReceived,\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({ reload }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);\n"]},"metadata":{},"sourceType":"module"}