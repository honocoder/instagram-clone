{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExpoVideoThumbnails from \"./ExpoVideoThumbnails\";\nexport function getThumbnailAsync(sourceFilename) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getThumbnailAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoVideoThumbnails.getThumbnail(sourceFilename, options));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/VideoThumbnails.ts"],"names":[],"mappings":";AAAA,OAAO,mBAAP;AAcA,OAAO,SAAe,iBAAf,CACL,cADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,OAFK,2DAE6B,EAF7B;AAAA;AAAA,2CAIQ,mBAAmB,CAAC,YAApB,CAAiC,cAAjC,EAAiD,OAAjD,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ExpoVideoThumbnails from './ExpoVideoThumbnails';\nimport { VideoThumbnailsOptions, VideoThumbnailsResult } from './VideoThumbnailsTypes.types';\n\nexport { VideoThumbnailsOptions, VideoThumbnailsResult };\n\n// @needsAudit\n/**\n * Create an image thumbnail from video provided via `sourceFilename`.\n *\n * @param sourceFilename An URI of the video, local or remote.\n * @param options A map defining how modified thumbnail should be created.\n *\n * @return Returns a promise which fulfils with [`VideoThumbnailsResult`](#videothumbnailsresult).\n */\nexport async function getThumbnailAsync(\n  sourceFilename: string,\n  options: VideoThumbnailsOptions = {}\n): Promise<VideoThumbnailsResult> {\n  return await ExpoVideoThumbnails.getThumbnail(sourceFilename, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}